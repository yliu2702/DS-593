# -*- coding: utf-8 -*-
"""cleaner.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kxlupgWo41DO2-pZ2QmUXqKEJoSAxkpe
"""

import pandas as pd
import numpy as np
import sqlalchemy

# Replace this with your actual SQLite database connection string
DB_CONNECTION_STRING = 'sqlite:///health_events_data.db'

# Establishing a connection to the SQLite database
engine = sqlalchemy.create_engine(DB_CONNECTION_STRING)
connection = engine.connect()
print("Connecting with DB successfully!")

# Load the data from the database into a Pandas DataFrame
# Modify the query to match your actual table name
query = "SELECT * FROM health_events"
df = pd.read_sql(query, connection)

# Handle missing values
# Fill missing numerical values with the mean of the column
numerical_cols = df.select_dtypes(include=['number']).columns
df[numerical_cols] = df[numerical_cols].apply(lambda x: x.fillna(x.mean()))

# Fill missing categorical values with the mode of the column
categorical_cols = df.select_dtypes(include=['object']).columns
df[categorical_cols] = df[categorical_cols].apply(lambda x: x.fillna(x.mode()[0]))

# Remove duplicate rows
df.drop_duplicates(inplace=True)

# Standardize formatting of text columns
# Trim spaces and capitalize text in categorical columns
df[categorical_cols] = df[categorical_cols].apply(lambda x: x.str.strip().str.capitalize())

# Correct obvious data entry errors
# Example: Correct misspelled values in a specific categorical column
# Define corrections in a dictionary format
corrections = {
    'Condition': {
        'fever': 'Fever',
        'coughing': 'Cough',
        # Add more corrections as needed
    },
    'Agent': {
        'aspirn': 'Aspirin',
        # Add more corrections as needed
    }
}

# Apply corrections
for col, correction in corrections.items():
    if col in df.columns:
        df[col] = df[col].replace(correction)

# Cleaned Statistics (after cleaning)
print("\nCleaned Statistics:")

# 1. Number of missing cells by column after cleaning
cleaned_missing_cells = df.isnull().sum()
print("\nNumber of missing cells by column (Cleaned):")
print(cleaned_missing_cells)

# 2. Number of categories in each specified column after cleaning
cleaned_categories_count = {col: df[col].nunique() for col in category_columns if col in df.columns}
print("\nNumber of categories in each column (Cleaned):")
print(cleaned_categories_count)

# Save the cleaned data back into a new table in the SQLite database named 'cleaned_data'
df.to_sql('cleaned_data', connection, if_exists='replace', index=False)

# Closing the connection
connection.close()

print("Data cleaning completed and saved to 'cleaned_data' table.")
